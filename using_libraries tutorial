pragma solidity 0.5.1;
//how libraries can be imported and how math is done

import "./math_divide function.sol";
contract MyContract {
    uint256 public value;
    
    function calculate(uint _value1, uint _value2) public {
        value = Math.divide(_value1, _value2); 
    }
    
}

// a separate file to manage things easie. e.g. titled: ./math_divide function.sol
pragma solidity 0.5.1;

// DRY: dont repeat yourself, Library is code that can be reused and imported. no storage. cant inherit. used in smart contract
library Math {
    function divide(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0);
        uint256 c = a / b;
        return c;
    }
}

//repeat process for more complex libraries such as SafeMath 
// copy and paste raw file from github: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol
pragma solidity 0.8.0;

//reference the import for the specific library
import "./SafeMath.sol";
contract MyContract {

//declare that the library i sused
    using SafeMath for uint256;
    uint256 public value;
    
    function calculate(uint _value1, uint _value2) public {
        value = _value1.div(_value2); 
    }
    
}
