pragma solidity ^0.8.0;
//save money and cant withdraw until a specific date
//this can be applied to vesting contracts

contract Timelock {
    //require who can withdraw?
    //how much can they withdraw?
    //when can they withdraw
    
    //state variables are things that stored on the blockchain
    //address is an identifier
    //time is expressed as unix timestampts -> refer to unixtimestamp.com
    //adding payable because beneficiary needs to be able to receive the funds
    
    address payable public beneficiary;
    uint256 public releaseTime;
    
    constructor(
        address payable _beneficiary,
        uint256 _releaseTime
    ) 
        public 
        payable
    {
        require(_releaseTime > block.timestamp);
        beneficiary = _beneficiary;
        releaseTime = _releaseTime;
    }
    
    function release() public {
        
          require(block.timestamp >= releaseTime);
        
        //call transfer function to send ETH to _beneficiary
        //determine amount to send by determining how much the smart contract holds
        //got an error transfer address needs to be payable
        address(beneficiary).transfer(address(this).balance);
    }
}


//token timelock tutorial
//token file needs to be deployed first
pragma solidity ^0.8.0;

import "./Token.sol";

contract TokenTimelock {
    //smart contract address of token deployed to the blockchain
    //token is the datatype assigned to state variable
    //token that we want to lockup
    Token public token;
    address public beneficiary;
    uint256 public releaseTime;
    
    constructor(Token _token, address _beneficiary, uint256 _releaseTime) public {
        require(_releaseTime > block.timestamp);
        token = _token;
        beneficiary = _beneficiary;
       releaseTime = _releaseTime
    }
    
    function release() public {
        //this refers to the smart contract
        //its checking how many tokens that the smart contract has
       require(block.timestamp >= releaseTime);
        uint256 amount = token.balanceOf(address(this));
        require(amount > 0);
        token.transfer(beneficiary, amount); 
        
    }
}


